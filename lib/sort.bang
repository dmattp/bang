fun :map xform = {
  fun :innermap = {
    # 0 > ?
    as val innermap! val xform!
  }
  innermap!
}

fun :filter predicate = {
    fun v = {
      v predicate! ? v
    } map!
}


fun :eqFromLt lt = {
   fun obj2 = as obj1
      obj1 obj2 lt!
      obj2 obj1 lt! /or /not
}

fun :gtFromLt lt = { fun = swap! lt! }


fun :make-qsort = { as opLt

  opLt eqFromLt! as opEq
  opLt gtFromLt! as opGt
  
  fun :qsort-inner = {
    # 2 / nth!  as pivotValue -- Stack[stacklen / 2]
    save-stack! as theStack
   
   theStack! fun = pivotValue opLt!; filter! # 1 > ? qsort-inner!;
  (theStack! fun = pivotValue opEq!; filter!)
  (theStack! fun = pivotValue opGt!; filter! # 1 > ? qsort-inner!;)
  }
  qsort-inner
}

fun :quicksort = {
  # 2 / nth!  as pivotValue -- Stack[stacklen / 2]
  save-stack! as theStack
 
}

-- create a sort function which orders objects on the stack by the given field
fun :objsort field = { 
    fun :f-lt = { as obj2 as obj1 field obj1! field obj2! < }
    f-lt make-qsort!
}




fun = lookup
