fun :times = { swap! as loopFun
    fun! :innerLoop remain = {
      loopFun!
      remain 1 >
      ? remain 1 - innerLoop!
    }
}


--fun :range last = { swap! as do-me
--   fun! :inner current = {
--      current do-me!
--      current last <
--      ? current 1 + inner!
--   }
--   -- first inner!
--}

fun :range last = { swap! as do-me
   fun! :inner current = {
      current last >~ ?
         current do-me!
         current 1 + inner!
   }
}

fun = lookup

