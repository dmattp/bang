def :times = { swap! as loopFun
    def! :innerLoop remain = {
      loopFun!
      remain 1 >
      ? remain 1 - innerLoop!
    }
}


--def :range last = { swap! as do-me
--   def! :inner current = {
--      current do-me!
--      current last <
--      ? current 1 + inner!
--   }
--   -- first inner!
--}

def :range last = { swap! as do-me
   def! :inner current = {
      current last >~ ?
         current do-me!
         current 1 + inner!
   }
}

fun = lookup

