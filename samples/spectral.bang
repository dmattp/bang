# 1 < ? 125; as N


def :times = { swap! as loopFun
    def! :innerLoop remain = {
      loopFun!
      remain 1 >
      ? remain 1 - innerLoop!
    }
}


def :range last = {
   swap! as do-me
   -- first
   def! :inner current = {
      current do-me!
      current last <
      ? current 1 + inner!
   }
   -- first inner!
}

--def :A j = { as i
--  i j + 1 -
--  1.0
--    swap! dup! 1 - * 0.5 * i +
--  /
--}

--- --- def :A = { -- as i
--- ---   1 nth!  -- i j i 
--- ---   + 1 -   -- i (i+j-1 aka ij)
--- ---   dup! 1 - * 0.5 * -- i (ij*(ij-1)*0.5)
--- ---   +
--- ---   1.0 swap! /
--- --- }
'arraylib' crequire! .from-stack as stack-to-array

def :Av N = {
  stack-to-array! as input
  fun i = { -- local a = 0
     0 fun j = { -- for j=1,N do a = a + x[j] * A(i, j) end
       j 1 - input!
  1.0
  i j i
--    i dup! j swap!

-- A! 
  -- 1 nth!  -- i j i
  + 1 -   -- i (i+j-1 aka ij)
  as ij ij 1 - ij * 0.5 * -- i (ij*(ij-1)*0.5)
  +
  / -- 1.0 (earlier) / ...

       * +
     } 1 N range!     
  } 1 N range!
}

def :Atv N = {
  stack-to-array! as input
  fun i = { -- local a = 0
     0 fun j = { -- for j=1,N do a = a + x[j] * A(j, i) end
       j 1 - input!
       1.0
       j i j
       --  j i 1 nth!  -- i j i 
--        j dup! i swap!

  + 1 -   -- i (i+j-1 aka ij)
  as ij ij 1 - ij * 0.5 * -- i (ij*(ij-1)*0.5)
  +
  / -- 1.0 (earlier) / ...

--A!

* +
     } 1 N range!     
  } 1 N range!
}

def :AtAv N = {
  N Av!
  N Atv!
}


fun = 1; N times!

false
fun = { as oldv
        N AtAv! stack-to-array! as v
v.push! N AtAv! v
} 10 times!
as v stack-to-array! as u

0
fun i = {
  i u! i v! * +
} 0 N 1- range!
as vBv

0
fun i = {
  i v! dup! * +
} 0 N 1 - range!
as vv

vBv vv / -- sqrt!

-- 50 takes about 600ms  (lua=40ms)
-- 100 takes about 2.0s  (lua=90ms)
-- 150 takes about 4.5s  (lua=185ms)

-- So again, about 20-25x slower than lua.
-- The best ruby from http://benchmarksgame.alioth.debian.org/u32/performance.php?test=spectralnorm#about
--   is about 2x slower than lua.  So here, also 10x slower than ruby.
-- the worst score on the shootout is just under 5x slower than lua.  So I'm hardly even in contention
-- with the worst contender. So pretty slow.
 
-- not exactly a screamer, but not at all optimized. And I still don't have array access,
-- but honestly I don't think that's a big killer


-- update: woohoo, after taking primitive operations out of shared_ptr<> usage time for 150 dropped to 2.5s, so only 13.5x
-- still at 3.2s for MSVC, even with GC 

-- update: After changing math and comparison primitives (+-/*<>=) to not pop/push but rather
-- mutate the stack in-place, MSVC+GC is down to 2.75 and MingW is hitting 2.4.  Better, but
-- not a huge improvement. 



-- with ApplyPrimitive, MingW is at 2.1 best (11.3x lua).  MSVC+GC is 2.45.  Better and simpler.




