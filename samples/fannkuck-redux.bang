-- The Computer Language Benchmarks Game
-- http://benchmarksgame.alioth.debian.org/
-- translated from Lua by Matt Placek
# 1 < ? 8; as N

'lib/iterate.bang' require! .range as range
'arraylib' crequire! .from-stack as stack-to-array

# N "fannkuck start stack=%@ N=%@\n" print!

def :fannkuch n = {
--  # n "stack=%@ fannkuck n=%@\n" print!

   (fun=; 0 n range! stack-to-array!) as p
   (p/to-stack stack-to-array!) as q
   (p/to-stack stack-to-array!) as s

   def :iloopy j = { as i
      i j q/swap
      j i - 2 >
      ? i 1 + j 1 - iloopy!
   }

   fun i = p[i] i q/set; as setqfromp

   fun j = { j 1 + p[] j p/set } as setjfromplus1

   def :setjfromplus1x top = {
     1
     def! :inner9 j = {
       j 1 + p[] j p/set
       j top < ? j 1 + inner9!
     }
--     1 inner9!
   }

   def :permute-loop i = {
       s[i] as sx
       sx 1 = 
       ? {
           i n <
           ? {
              i i s/set
              p[1] as t
--              setjfromplus1 1 i range!
              i setjfromplus1x!
              t i 1 +  p/set
              i 1 + permute-loop!
           }
           : false
       }
       : { sx 1 - i s/set true }
   }

   def :flipper-loop sum maxflips sign = { 
      def! :inner-flipper q1 flips = { 
        q[q1] as qq
        qq 1 =
        ? { sum sign flips * + 
            flips maxflips > ? flips : maxflips 
        }
        : { q1 q1 q/set
            q1 4 < ? : { 2 q1 1 - iloopy! }
            qq flips 1 + inner-flipper!
        } -- q1 1 = :
     }
     -- inner-flipper!
   } -- end, flipper-loop

   0 0 1
   def! :inner-mainloop sum maxflips sign = { 
     p[1] as q1
     q1 1 = ? sum maxflips : {
        setqfromp 2 n range!  -- MUTATION
        q1 1 sum maxflips sign flipper-loop!
     } -- end, q1 1 = not! ?
     sign 1 = ? {
          1 2 p/swap
          -1 inner-mainloop!
     } : {
          2 3 p/swap
          3 permute-loop! -- permute loop returns 'true' to continue or 'sum maxflips false' on finish
          ? 1 inner-mainloop!
     }
   } -- :inner-mainloop
   -- sum, maxflips, sign
   -- 0 0 1 inner-mainloop!
--   'exited mainloop\n' print!
} -- end, :fannkuck

N fannkuch! as maxflips as sum
sum N maxflips "Sum = %@\nPfannkuchen(N = %@) maxflips = %@\n" print!

-- lua523r time for '9' on my box = 970ms ; sum=8629, maxflips=30