# 1 < ? 19000; as N

'lib/hof.bang' require! .filter as filter

'lib/nylon.bang' require! as nylon
'arraylib' crequire! as array


fun :quicksort-inner = {
  # 2 / nth!  as pivotValue -- Stack[stacklen / 2]
  save-stack! as theStack
 
  theStack! fun = pivotValue <; filter! # 1 > ? quicksort-inner!;
  (theStack! fun = pivotValue =; filter!)
  (theStack! fun = pivotValue >; filter! # 1 > ? quicksort-inner!;)
}

'lib/iterate.bang' require! as iterate

-- cord
fun :qs-stack-coro low hi theArray cord = {
  # low hi theArray 'qs-stack-coro #=%@ lo=%@ hi=%@ theArray=%@\n' print!
  (theArray low hi iterate.range! quicksort-inner cord.asthread!)
}


fun :quicksort = {
  # as nvalues
  nvalues 4 / as one-fourth
  array.from-stack! as values

  0 
  fun! :sortsome initplace = {
     initplace nvalues < ?
     initplace one-fourth + as nextplace
     initplace nextplace 1 - values qs-stack-coro nylon.cord! as theCord
     nextplace sortsome!
  }
}


'./mathlib' crequire! .random as random

fun :testQuicksort numItems = { 
  random numItems iterate.times!
  quicksort!
}

-- 

fun=
N testQuicksort!
;1 iterate.times!

nylon.runloop!


N 9499 > ? { save-stack! drop! }

-- with GC 1.2s
