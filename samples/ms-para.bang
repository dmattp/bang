# 1 < ? 19000; as N

'lib/hof.bang'   require! as hof
'lib/nylon.bang' require! as Nylon
'arraylib'       crequire! as Array
'mathlib'        crequire! .random as random


-- cord
fun :qs-stack-coro low hi theArray cord = {

fun :mergesort min max a = {
  max min - 1 + as n
--  min max n 'enter min=%@ max=%@ n=%@\n' print!
  n 3 < ? { -- array 2 elements or less
    n 2 < -- only one element
    ? (a[min] Array.from-stack!)
    : a[min] a[max] < ? (a[min] a[max] Array.from-stack!)
    :                   (a[max] a[min] Array.from-stack!)
  } :
  n 2 / min + as mid
  min mid a mergesort! as left left/# as nleft
  mid 1 + max a mergesort! as right right/# as nright
  (
  0 0 fun! :merge il ir = {
--    il nleft ir nright 'merge il=%@ nleft=%@ ir=%@ nright=%@\n' print!
    il nleft < as haveLeft ir nright < as haveRight
    haveLeft ? {
      haveRight ? {
        left[il] right[ir] < ? {
          left[il]  il 1 + ir merge!
        } : {
          right[ir] il ir 1 + merge!
        }
      } : left[il] il 1 + ir merge!
    } : {
      haveRight ? right[ir] il ir 1 + merge!
    }
  }
  Array.from-stack!)
}


    # low hi theArray 'ms-stack-coro #=%@ lo=%@ hi=%@ theArray=%@\n' print!

  (theArray low hi hof.range! Array.from-stack! as a
     fun= 0 hi low - a mergesort!; cord.asthread!
  )
  as sorted sorted/to-stack
}


fun :mergesort = {
  # as nvalues
  nvalues 4 / as one-fourth
  Array.from-stack! as values

  0 
  fun! :sortsome initplace = {
     initplace nvalues < ?
     initplace one-fourth + as nextplace
     initplace nextplace 1 - values qs-stack-coro Nylon.cord! as theCord
     nextplace sortsome!
  }
}


fun :testQuicksort numItems = { 
  random numItems hof.times!
  mergesort!
}

-- 

N testQuicksort!

Nylon.runloop!


N 9499 > ? { save-stack! drop! }

-- with GC 1.2s
